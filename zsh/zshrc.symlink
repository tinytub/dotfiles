# some config from https://github.com/nicknisi/dotfiles/blob/master/zsh/zshrc.symlink
# some config from https://github.com/taigacute/dotfiles
# some config from https://github.com/Aloxaf/dotfiles

# Try startship ?
#
# Enable Powerlevel10k instant prompt. Should stay at the top of ~/.zshrc.
#if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
#fi

export ZSH=$HOME/.oh-my-zsh
source $ZSH/oh-my-zsh.sh

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_COMMAND='rg --files --hidden --glob "!.git"'
export FZF_DEFAULT_OPTS='--height 40% --reverse --border --color=bg+:23 -m'
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust
### End of Zinit's installer chunk
#
#############################################
# Zinit Plugins
#############################################

# Load powerlevel10k theme
#zinit ice depth"1" # git clone depth
#zinit light romkatv/powerlevel10k

# Create and bind multiple widgets using fzf
zinit ice wait'0a' lucid id-as"junegunn/fzf_completions" pick"/dev/null" multisrc"shell/{completion,key-bindings}.zsh"
zinit light junegunn/fzf

zinit ice as"command" from"gh-r" \
          atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
          atpull"%atclone" src"init.zsh" # pull behavior same as clone, source init.zsh
zinit light starship/starship


zinit ice atload"eval $(lua $HOME/.local/share/zinit/plugins/skywind3000---z.lua/z.lua --init zsh once enhanced fzf)"
#zinit ice atload'eval "$(lua ${ZPLUG_HOME}/repos/skywind3000/z.lua/z.lua --init zsh enhanced once echo fzf)"'
zinit light skywind3000/z.lua

# ─── fuzzy movement and directory choosing ────────────────────────────────────
# autojump command
# https://github.com/rupa/z 
zinit ice wait blockf lucid
zinit light rupa/z

# z tab completion
# lets z+[Tab] and zz+[Tab]
# https://github.com/changyuheng/fz
zinit ice wait lucid
zinit light changyuheng/fz

# z / fzf (ctrl-g)
zinit ice wait lucid
zinit light andrewferrier/fzf-z

# Fish like interactive tab completion for cd in zsh
#zinit ice pick"zsh-interactive-cd.plugin.zsh" wait'!0'
#zinit light changyuheng/zsh-interactive-cd

#zinit ice wait"1" lucid
#zinit light wfxr/forgit

zinit ice wait"3" lucid
zinit light bonnefoa/kubectl-fzf

zinit wait lucid for \
  OMZP::colored-man-pages \
  OMZP::brew \
  OMZP::golang \
  OMZP::kubectl \
  OMZP::ssh-agent \
  OMZP::command-not-found \
  OMZP::git \
  OMZL::git.zsh \
  OMZP::docker-compose

# ─── IMPORTANT ───────────────────────────────────────────────────────────────

# additional completion definitions
# https://github.com/zsh-users/zsh-completions
# zt 0a blockf atpull'zinit creinstall -q .'; z zsh-users/zsh-completions
zinit ice wait lucid blockf atpull'zinit creinstall -q .'
zinit ice blockf; zinit light zsh-users/zsh-completions
#zinit ice blockf
#zinit light zsh-users/zsh-completions

#zinit ice as"completion"
#zinit snippet https://github.com/deadc0de6/dotdrop/blob/master/completion/_dotdrop.sh-completion.zsh

# fast-syntax-highlighting
# https://github.com/zdharma/fast-syntax-highlighting
# (compinit without `-i` spawns warning on `sudo -s`)
#zinit ice wait lucid atload"zicompinit; zicdreplay; FAST_HIGHLIGHT[chroma-man]="
#zinit light zdharma-continuum/fast-syntax-highlighting
#zinit ice wait'0a' lucid atinit"ZINIT[COMPINIT_OPTS]='-i' _zpcompinit_fast; zpcdreplay"
zinit ice wait lucid atload"zicompinit; zicdreplay; FAST_HIGHLIGHT[chroma-man]="
zinit light zdharma/fast-syntax-highlighting

# zsh-history-substring-search
# https://github.com/zsh-users/zsh-history-substring-search
zinit ice wait lucid
zinit light zsh-users/zsh-history-substring-search

# multi-word, syntax highlighted history searching
# https://github.com/zdharma/history-search-multi-word
zinit ice wait'1a' lucid trackbinds bindmap'^R -> ^S'
zinit light zdharma/history-search-multi-word

# autosuggestions
# https://github.com/zsh-users/zsh-autosuggestions
# Note: should go _after_ syntax highlighting plugin
# zinit ice wait lucid atload'_zsh_autosuggest_start'
# zinit light zsh-users/zsh-autosuggestions
zinit ice wait'0a' lucid atload'_zsh_autosuggest_start' compile'{src/*.zsh,src/strategies/*}'
zinit light zsh-users/zsh-autosuggestions

# ──────────────────────────────────────────────────────────────────────────────


# a collection of LS_COLORS definitions
# https://github.com/trapd00r/LS_COLORS
# on macOS, you might need to install coreutils from homebrew and use the
# g-prefix – gsed, gdircolors
zinit ice pick"c.zsh" atclone"local PFX=${${(M)OSTYPE:#*darwin*}:+g}
            git reset --hard;
            \${PFX}sed -i '/DIR/c\DIR                   38;5;105;1' LS_COLORS; \
            \${PFX}sed -i '/LINK/c\LINK                 38;5;115' LS_COLORS; \
            \${PFX}dircolors -b LS_COLORS > c.zsh" atpull'%atclone' nocompile'!'
zinit light trapd00r/LS_COLORS

#CUSTOM=~/.dotfiles/zsh

# make terminal command navigation sane again
bindkey '^[^[[D' backward-word
bindkey '^[^[[C' forward-word
bindkey '^[[5D' beginning-of-line
bindkey '^[[5C' end-of-line
bindkey '^[[3~' delete-char


#alias
alias vi="nvim"
#alias vim="vim"
alias vim="nvim"
alias sed="gsed"
#alias lc='colorls -lA --sd'
#alias emacs="/Applications/Emacs.app/Contents/MacOS/Emacs"
alias reload="source ~/.zshrc"
#alias es="/Applications/Emacs.app/Contents/MacOS/Emacs -nw"
if ls --color > /dev/null 2>&1; then # GNU `ls`
    colorflag="--color"
else # macOS `ls`
    colorflag="-G"
fi
alias l="ls -lah ${colorflag}"
alias ls="ls -ah ${colorflag}"
alias la="ls -AF ${colorflag}"
alias ll="ls -lFh ${colorflag}"
alias lld="ls -l | grep ^d"
alias rmf="rm -rf"
# tmux aliases
alias ta='tmux attach'
alias tls='tmux ls'
alias tat='tmux attach -t'
alias tns='tmux new-session'

alias zc='z -c'      # 严格匹配当前路径的子路径
alias zz='z -i'      # 使用交互式选择模式
alias zf='z -I'      # 使用 fzf 对多个结果进行选择
alias zb='z -b'      # 快速回到父目录

# "cat" cloning
if type "bat" >/dev/null 2>&1; then
    alias cat="bat"
fi
#functions
#tmux
ftpane() {
  local panes current_window current_pane target target_window target_pane
  panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')

  target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

  target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

  if [[ $current_window -eq $target_window ]]; then
    tmux select-pane -t ${target_window}.${target_pane}
  else
    tmux select-pane -t ${target_window}.${target_pane} &&
    tmux select-window -t $target_window
  fi
}

eval "$(starship init zsh)"
