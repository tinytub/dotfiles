# some config from https://github.com/nicknisi/dotfiles/blob/master/zsh/zshrc.symlink
# some config from https://github.com/taigacute/dotfiles
# some config from https://github.com/Aloxaf/dotfiles

#zmodload zsh/zprof
# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_COMMAND='rg --files --hidden --glob "!.git"'
export FZF_DEFAULT_OPTS='--height 40% --reverse --border --color=bg+:23 -m'
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"

#export FZF_DEFAULT_OPTS='--color=bg+:23 -m --bind ctrl-space:toggle'

# tmux

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#source ~/.zinit/bin/zplugin.zsh
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing DHARMA Initiative Plugin Manager (zdharma/zinit)…%f"
    command mkdir -p $HOME/.zinit
    command git clone https://github.com/zdharma/zinit $HOME/.zinit/bin && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%F" || \
        print -P "%F{160}▓▒░ The clone has failed.%F"
fi
source "$HOME/.zinit/bin/zinit.zsh"

# ==== 某些插件需要的环境变量 ====

ZSH_AUTOSUGGEST_STRATEGY=(history completion)
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
ZSH_AUTOSUGGEST_USE_ASYNC=1
ZSH_AUTOSUGGEST_MANUAL_REBIND=1
ZSH_AUTOSUGGEST_COMPLETION_IGNORE='( |man |pikaur -S )*'

forgit_add=gai
forgit_diff=gdi
forgit_log=glgi
# ==== 加载 OMZ 插件 ====

zinit for \
    OMZ::lib/clipboard.zsh \
    OMZ::lib/git.zsh \
    OMZ::plugins/colored-man-pages/colored-man-pages.plugin.zsh \
    OMZ::plugins/git-extras/git-extras.plugin.zsh \
    OMZ::plugins/systemd/systemd.plugin.zsh \
    OMZ::plugins/sudo/sudo.plugin.zsh \
    OMZ::plugins/git/git.plugin.zsh

zinit svn for \
    OMZ::plugins/extract \
    OMZ::plugins/pip

zinit as="completion" for \
    OMZ::plugins/fd/_fd

# ==== 加载 GitHub 插件 ====
zinit light-mode lucid wait for \
    zdharma/fast-syntax-highlighting \
    zsh-users/zsh-autosuggestions \
    hlissner/zsh-autopair \
    skywind3000/z.lua \
    hchbaw/zce.zsh \
    wfxr/forgit


zinit light-mode for \
    blockf \
        zsh-users/zsh-completions \
    as="program" atclone="rm -f ^(rgg|agv)" \
        lilydjwg/search-and-view \
    atclone="dircolors -b LS_COLORS > c.zsh" atpull='%atclone' pick='c.zsh' \
        trapd00r/LS_COLORS

zinit ice lucid wait"!0"
zinit light changyuheng/fz

zinit ice depth=1
zinit light romkatv/powerlevel10k

# ==== 初始化补全 ====

zpcompinit; zpcdreplay
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# ==== 加载自定义插件 ====

CUSTOM=~/.dotfiles/zsh


#source $CUSTOM/snippets/alias.zsh
#source $CUSTOM/snippets/alias-tips.zsh
#source $CUSTOM/snippets/completion.zsh # 先玩着,不好使再说, 来自 Aloxaf/dotfiles
source $CUSTOM/snippets/history.zsh
#source $CUSTOM/snippets/key-bindings.zsh
source $CUSTOM/snippets/misc.zsh



# # zplug configruation
# if [[ ! -d "${ZPLUG_HOME}" ]]; then
#   if [[ ! -d ~/.zplug ]]; then
#     git clone https://github.com/zplug/zplug ~/.zplug
#     # If we can't get zplug, it'll be a very sobering shell experience. To at
#     # least complete the sourcing of this file, we'll define an always-false
#     # returning zplug function.
#     if [[ $? != 0 ]]; then
#       function zplug() {
#         return 1
#       }
#     fi
#   fi
#   export ZPLUG_HOME=~/.zplug
# fi
# 
# if [[ -d "${ZPLUG_HOME}" ]]; then
#   source "${ZPLUG_HOME}/init.zsh"
# fi
# 
# #zplug "junegunn/fzf-bin", \
# #    from:gh-r, \
# #    as:command, \
# #    rename-to:fzf, \
# #    use:"*darwin*amd64*"
# 
# zplug "zplug/zplug", hook-build:"zplug --self-manage"
# zplug "plugins/git",               from:oh-my-zsh, if:"(( $+commands[git] ))"
# #zplug "plugins/sudo",              from:oh-my-zsh, if:"(( $+commands[sudo] ))"
# zplug "plugins/golang",            from:oh-my-zsh, if:"(( $+commands[go] ))"
# zplug "plugins/node",              from:oh-my-zsh, if:"(( $+commands[node] ))"
# zplug "plugins/npm",               from:oh-my-zsh, if:"(( $+commands[npm] ))"
# zplug "plugins/docker",            from:oh-my-zsh, if:"(( $+commands[docker] ))"
# zplug "plugins/docker-compose",    from:oh-my-zsh, if:"(( $+commands[docker-compose] ))"
# zplug 'plugins/git', from:oh-my-zsh, if:'which git'
# zplug "plugins/autojump", from:oh-my-zsh
# zplug 'romkatv/powerlevel10k', use:powerlevel10k.zsh-theme
# zplug 'zsh-users/zsh-autosuggestions'
# zplug 'zsh-users/zsh-completions', defer:2
# zplug 'zsh-users/zsh-history-substring-search'
# zplug 'zsh-users/zsh-syntax-highlighting', defer:2
# 
# if ! zplug check; then
#   zplug install
# fi
# 
# zplug load
# 
# if zplug check 'zsh-users/zsh-autosuggestions'; then
#   # Enable asynchronous fetching of suggestions.
#   ZSH_AUTOSUGGEST_USE_ASYNC=1
#   # For some reason, the offered completion winds up having the same color as
#   # the terminal background color (when using a dark profile). Therefore, we
#   # switch to gray.
#   # See https://github.com/zsh-users/zsh-autosuggestions/issues/182.
#   ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
# fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#zprof

#source "$HOME/.dotfiles/zsh/alias"

# make terminal command navigation sane again
bindkey '^[^[[D' backward-word
bindkey '^[^[[C' forward-word
bindkey '^[[5D' beginning-of-line
bindkey '^[[5C' end-of-line
bindkey '^[[3~' delete-char


#alias
alias vi="nvim"
#alias vim="vim"
alias vim="nvim"
#alias lc='colorls -lA --sd'
#alias emacs="/Applications/Emacs.app/Contents/MacOS/Emacs"
alias reload="source ~/.zshrc"
#alias es="/Applications/Emacs.app/Contents/MacOS/Emacs -nw"
if ls --color > /dev/null 2>&1; then # GNU `ls`
    colorflag="--color"
else # macOS `ls`
    colorflag="-G"
fi
alias l="ls -lah ${colorflag}"
alias ls="ls -ah ${colorflag}"
alias la="ls -AF ${colorflag}"
alias ll="ls -lFh ${colorflag}"
alias lld="ls -l | grep ^d"
alias rmf="rm -rf"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."
alias ~="cd ~" # `cd` is probably faster to type though
alias -- -="cd -"
# tmux aliases
alias ta='tmux attach'
alias tls='tmux ls'
alias tat='tmux attach -t'
alias tns='tmux new-session'

alias zc='z -c'      # 严格匹配当前路径的子路径
alias zz='z -i'      # 使用交互式选择模式
alias zf='z -I'      # 使用 fzf 对多个结果进行选择
alias zb='z -b'      # 快速回到父目录

#functions
#tmux
ftpane() {
  local panes current_window current_pane target target_window target_pane
  panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')

  target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

  target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

  if [[ $current_window -eq $target_window ]]; then
    tmux select-pane -t ${target_window}.${target_pane}
  else
    tmux select-pane -t ${target_window}.${target_pane} &&
    tmux select-window -t $target_window
  fi
}


### Added by Zinit's installer
### End of Zinit installer's chunk
