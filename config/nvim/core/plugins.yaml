# why use yaml to manage plugins
# see http://genkisugimoto.com/blog/manage-vim-plugins-via-yamsource
# StartUp Plugins{{{

# PackageManage{{{
- repo: Shougo/dein.vim
  on_func: dein#

# }}}

# Editor UI{{{
#- repo: wsdjeg/dein-ui.vim
#- repo: taigacute/spaceline.vim
- repo: vim-airline/vim-airline
  hook_source: source $VIM_PATH/core/plugins/airline.vim
- repo: vim-airline/vim-airline-themes
  #- repo: itchyny/lightline.vim
  #  hook_add: source $VIM_PATH/core/plugins/lightline.vim
  #- repo: mengelbrecht/lightline-bufferline
  #- repo: josa42/vim-lightline-coc

# themes
- repo: arcticicestudio/nord-vim
- repo: rakr/vim-one
- repo: sainnhe/forest-night
- repo: wadackel/vim-dogrun
- repo: qpkorr/vim-bufkill
- repo: ajmwagar/vim-deus

#- repo: bagrat/vim-buffet
#  hook_add: source $VIM_PATH/modules/module-buffet.vim

#- repo: bagrat/vim-buffet
#  on_event: VimEnter
#  hook_add: source $VIM_PATH/core/plugins/buffet.vim
- repo: editorconfig/editorconfig-vim
- repo: ryanoasis/vim-devicons

# my
- repo: benmills/vimux
- repo: romainl/vim-qf
- repo: itchyny/vim-parenmatch # 括号 match, let g:loaded_matchparen = 1 "高亮括号,别瞎关... 或者用itchyny/vim-parenmatch

# 配色{{{
#- repo: morhetz/gruvbox
#- repo: taigacute/gruvbox9
- repo: rafi/awesome-vim-colorschemes
# }}}


# Core Plugins{{{
- repo: neoclide/coc.nvim
  merged: 0
  build: 'yarn install --frozen-lockfile'
  hook_add: source $VIM_PATH/core/plugins/coc.vim


# Lazy Loading
# ==========================================

- repo: rizzatti/dash.vim
  if: "has('mac')"
  on_map: { n: <Plug> }
  hook_source: |
      let g:dash_map = {
        \ 'javascript': ['javascript', 'NodeJS'],
        \ 'javascriptreact': ['react'],
        \ 'html': ['html', 'svg'],
        \ 'go' : 'Go',
        \}

# }}}

# Interface{{{

- { repo: rhysd/accelerated-jk, on_map: { n: <Plug> } }

# ==========================================
# Completion and code analysis
# ----------

- repo: honza/vim-snippets
  depends: coc.nvim

# tags管理
- repo: ludovicchabant/vim-gutentags
  if: executable('ctags')
  on_event: [ BufReadPost, BufWritePost ]
  hook_source: source  $VIM_PATH/core/plugins/gutentags.vim

- repo: t9md/vim-choosewin
  on_map: { n: <Plug> }
  hook_source: source  $VIM_PATH/core/plugins/choosewin.vim

- repo: junegunn/vim-easy-align
  on_ft: [vim,json,go,html,js,jsx,py,css,less,tmpl,toml,xml,sql,Dockerfile]

- repo: psliwka/vim-smoothie
  on_func: smoothie#
  hook_add: |
        let g:smoothie_no_default_mappings = v:true

- repo: simnalamburt/vim-mundo
  on_cmd: MundoToggle

- {repo: tpope/vim-repeat , on_map: .* }

- repo: liuchengxu/vim-which-key
  on_cmd: [Whichkey, Whichkey!]
  hook_add: source $VIM_PATH/core/plugins/whichkey.vim
  hook_post_source: |
        function! s:register_whichkey()
            call which_key#register(',', 'g:which_key_map')
            call which_key#register(';', 'g:which_key_localmap')
        endfunction
        call s:register_whichkey()

- repo: easymotion/vim-easymotion
  on_map: { n: <Plug> }
  hook_source: |
        let g:EasyMotion_do_mapping = 0
        let g:EasyMotion_prompt = 'Jump to → '
        let g:EasyMotion_keys = 'fjdkswbeoavn'
        let g:EasyMotion_smartcase = 1
        let g:EasyMotion_use_smartsign_us = 1
# }}}

# File manager{{{
- repo: Shougo/defx.nvim
  on_cmd: Defx
  hook_source: source  $VIM_PATH/core/plugins/defx.vim

- repo: kristijanhusak/defx-git
  on_source: defx.nvim
  hook_source: |
    let g:defx_git#indicators = {
      \ 'Modified'  : '•',
      \ 'Staged'    : '✚',
      \ 'Untracked' : 'ᵁ',
      \ 'Renamed'   : '≫',
      \ 'Unmerged'  : '≠',
      \ 'Ignored'   : 'ⁱ',
      \ 'Deleted'   : '✖',
      \ 'Unknown'   : '⁇'
      \ }

- repo: kristijanhusak/defx-icons
  on_source: defx.nvim
  hook_add: |
    let g:defx_icons_column_length = 1
    let g:defx_icons_mark_icon = ''

# }}}

# Database{{{
- repo: tpope/vim-dadbod

- repo: kristijanhusak/vim-dadbod-ui
  on_cmd: [ DBUIToggle,DBUIAddConnection,DBUI,DBUIFindBuffer,DBUIRenameBuffer ]
  on_source: vim-dadbod
  hook_source: source $VIM_PATH/core/plugins/dadbod-ui.vim
# }}}

# Terminal {{{
- repo: voldikss/vim-floaterm
  on_cmd: [FloatermNew,FloatermToggle,FloatermPrev,FloatermNext,FloatermSend]
  hook_source: source  $VIM_PATH/core/plugins/floaterm.vim
# }}}

## Search Plugins{{{
#- repo: junegunn/fzf
#  build: './install --all'
#  merged: 0
#
#- repo: junegunn/fzf.vim
#  depends: fzf
#  on_cmd: [Colors,Rg,Files]
#  hook_source: source  $VIM_PATH/core/plugins/fzf.vim
#
#- repo: yuki-ycino/fzf-preview.vim
#  depends: fzf
#  on_cmd: [FzfPreviewProjectFiles,FzfPreviewDirectoryFile,FzfPreviewBuffers,FzfPreviewMruFiles,FzfPreviewAllBuffers,FzfPreviewProjectGrep,FzfPreviewMruFiles,FzfPreviewFromResources]
#  hook_source: source  $VIM_PATH/core/plugins/fzfpreview.vim
#
#- repo: Shougo/neomru.vim
#  on_source: fzf-preview.vim
#  hook_add: |
#    let g:neomru#directory_mru_path = $DATA_PATH . '/mru/dir'
#    let g:neomru#file_mru_path = $DATA_PATH . '/mru/file'
#    let g:unite_source_file_mru_limit = 5000


# Find Everythins
- repo: liuchengxu/vim-clap
  merged: 0
  build: 'bash install.sh'
  on_map: { n: <Plug> }
  hook_add: source $VIM_PATH/core/plugins/clap.vim

- repo: vn-ki/coc-clap
  on_source: vim-clap
# }}}

# Git Plugins{{{
- repo: jreybert/vimagit
  on_cmd: Magit
  hook_source: autocmd User VimagitEnterCommit startinsert

- repo: rhysd/committia.vim
  on_path: [ COMMIT_EDITMSG, MERGE_MSG ]
  hook_source: let g:committia_min_window_width = 7

- repo: tpope/vim-fugitive
  hook_source:
    augroup user_fugitive_plugin
      autocmd!
      autocmd FileType fugitiveblame normal A
    augroup END

#}}}

# Neovim Lua feature{{{
- repo: Vigemus/iron.nvim
  if: has('nvim')
  on_cmd: [ IronRepl, IronReplHere, IronFocus, IronSend, IronWatchCurrentFile ]
  on_map: { nv: <Plug> }
  on_func: IronUnwatchFile
  hook_add: let g:iron_map_defaults = 0 | let g:iron_map_extended = 0
  hook_source: luafile $VIM_PATH/core/plugins/iron.lua


# }}}
#
- repo: norcalli/nvim-colorizer.lua
  if: has('nvim-0.4')
  on_ft: [ html,css,sass,scss,stylus,vim,javascript,javascriptreact,typescript,typescriptreact ]
  hook_source: luafile $VIM_PATH/core/plugins/colorizer.lua

# Language{{{
- { repo: rust-lang/rust.vim, on_ft: rust }
- { repo: chr4/nginx.vim, on_ft: nginx }
- { repo: honza/dockerfile.vim, on_ft: Dockerfile }
- { repo: cespare/vim-toml, on_ft: toml }
- { repo: kevinoid/vim-jsonc, on_ft: json }

- repo: pearofducks/ansible-vim
  on_ft: [ ansible, ansible_hosts, jinja2 ]
  hook_add: |
    let g:ansible_extra_keywords_highlight = 1
    let g:ansible_template_syntaxes = {
      \   '*.json.j2': 'json',
      \   '*.(ba)?sh.j2': 'sh',
      \   '*.ya?ml.j2': 'yaml',
      \   '*.xml.j2': 'xml',
      \   '*.conf.j2': 'conf',
      \   '*.ini.j2': 'ini'
      \ }
- { repo: chemzqm/vim-jsx-improve, on_ft: [javascript,javascriptreact]}
- { repo: honza/dockerfile.vim, on_ft: Dockerfile }
- { repo: HerringtonDarkholme/yats.vim,on_ft: [ typescript, typescriptreact]}
- { repo: peitalin/vim-jsx-typescript, on_ft: [typescriptreact]}

- { repo: Vimjas/vim-python-pep8-indent, on_ft: python }
- { repo: vim-scripts/python_match.vim, on_ft: python }
- repo: vim-python/python-syntax
  on_ft: python
  hook_add: let g:python_highlight_all = 1
- { repo: raimon49/requirements.txt.vim, on_ft: requirements }

- repo: fatih/vim-go
  on_ft: [go,gomod]
  hook_source: |
    let g:go_gopls_enabled = 1
    let g:go_code_completion_enabled = 0
    let g:go_doc_keywordprg_enabled = 0
    let g:go_imports_autosave = 0
    let g:go_def_mapping_enabled = 0
    let g:go_mod_fmt_autosave = 0

    let g:go_highlight_array_whitespace_error = 1
    let g:go_highlight_chan_whitespace_error = 1
    let g:go_highlight_space_tab_error = 0
    let g:go_highlight_trailing_whitespace_error = 1
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_format_strings = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_function_calls = 1
    let g:go_highlight_function_parameters = 1
    let g:go_highlight_types = 1
    let g:go_highlight_generate_tags = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_string_spellcheck = 0
    let g:go_highlight_variable_declarations = 0
    let g:go_highlight_variable_assignments = 0

    " 关闭 vim-go 的 gd :GoDef 由 coc 接管
    " let g:go_def_reuse_buffer = 1

    " let g:go_fmt_command = "goimports"
    " 自动添加标签
    let g:go_addtags_transform = "snakecase"
    " let g:go_term_mode = "split"
    " let g:go_term_enabled = 1
    " 据说可以解决和 ale 的冲突
    " let g:go_fmt_fail_silently = 1
    " let g:go_decls_mode = 'fzf'

    " 关闭 vim-go 的 linter
    " let g:go_metalinter_autosave = 0
    " let g:go_metalinter_autosave_enabled = ['golint', 'vet']
    " let g:go_doc_popup_window = 1

# FileType {{{
- repo: Shougo/context_filetype.vim
- { repo: MTDL9/vim-log-highlighting, on_ft: log }
- repo: plasticboy/vim-markdown
  on_ft: markdown
  hook_add: |
    let g:vim_markdown_folding_level = 1
    let g:vim_markdown_folding_style_pythonic = 1
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_auto_insert_bullets = 1
    let g:vim_markdown_new_list_item_indent = 0
    let g:vim_markdown_conceal_code_blocks = 0
    let g:vim_markdown_conceal = 0
    let g:vim_markdown_strikethrough = 1
    let g:vim_markdown_edit_url_in = 'vsplit'
    let g:vim_markdown_fenced_languages = [
      \ 'c++=cpp',
      \ 'viml=vim',
      \ 'bash=sh',
      \ 'ini=dosini',
      \ 'js=javascript',
      \ 'json=javascript',
      \ 'jsx=javascriptreact',
      \ 'tsx=typescriptreact',
      \ 'docker=Dockerfile',
      \ 'makefile=make',
      \ 'py=python'
      \ ]

- repo: rhysd/vim-gfm-syntax
  depends: vim-markdown
  on_ft: markdown
  hook_add: |
    let g:gfm_syntax_enable_always = 0
    let g:gfm_syntax_highlight_emoji = 0
    let g:gfm_syntax_enable_filetypes = ['markdown']

- repo: iamcco/markdown-preview.nvim
  on_ft: [markdown,pandoc.markdown,rmd]
  build: 'sh -c "cd app & yarn install"'
  hook_source: |
      let g:mkdp_auto_start = 0
# }}}

# Coding{{{
- repo: tyru/caw.vim
  depends: context_filetype.vim
  on_map: { nx: <Plug> }

- repo: Yggdroot/indentLine
  on_event: BufReadPre
  hook_source: source $VIM_PATH/core/plugins/indentline.vim

- repo: liuchengxu/vista.vim
  on_cmd: [ Vista, Vista!, Vista!! ]
  hook_source: source  $VIM_PATH/core/plugins/vista.vim

- repo: mattn/emmet-vim
  on_event: InsertEnter
  on_ft: [python,html,css,javascript,javascriptreact,vue,c,c++,lua,rust,typescript,typescriptreact,php]
  hook_source: |
    let g:user_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'

- repo: luochen1990/rainbow
  on_ft: [ html,css,javascript,javascriptreact,vue,go,python,c,cpp,lua,rust,vim,less,stylus,sass,scss,json,ruby,scala,toml,php,haskell]
  hook_source: let g:rainbow_active = 1


# }}}

# Writing{{{
- repo: junegunn/goyo.vim
  on_cmd: Goyo
  hook_source: source  $VIM_PATH/core/plugins/goyo.vim

- repo: junegunn/Limelight.vim
  on_cmd: Limelight
  hook_add: |
    let g:limelight_conceal_ctermfg = 'gray'
    let g:limelight_conceal_ctermfg = 240
    let g:limelight_conceal_guifg = 'DarkGray'
    let g:limelight_conceal_guifg = '#777777'
#}}}

# Operator
- repo: kana/vim-operator-user
- repo: kana/vim-operator-replace
  on_map: { vnx: <Plug> }
- repo: machakann/vim-sandwich
  on_map: { vonx: <Plug>(operator-sandwich- }
  hook_add: |
    let g:sandwich_no_default_key_mappings = 1
    let g:operator_sandwich_no_default_key_mappings = 1
    let g:textobj_sandwich_no_default_key_mappings = 1

# TextObjectOperator
#- repo: kana/vim-textobj-user
#- { repo: terryma/vim-expand-region, on_map: { x: <Plug> }}
#- { repo: AndrewRadev/splitjoin.vim, on_map: { n: <Plug>Splitjoin }}
#
#- repo: AndrewRadev/dsf.vim
#  on_map: { n: <Plug>Dsf }
#  hook_add: let g:dsf_no_mappings = 1
#- repo: osyo-manga/vim-textobj-multiblock
#  on_map: { ox: <Plug> }
#  hook_add:  let g:textobj_multiblock_no_default_key_mappings = 1
#
#- repo: kana/vim-textobj-function
#  on_map: { ox: <Plug> }
#  hook_add: let g:textobj_function_no_default_key_mappings = 1
# }}}

#  vim: set ts=2 sw=2 tw=80 et :
