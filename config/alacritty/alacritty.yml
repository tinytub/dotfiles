# Configuration for Alacritty, the GPU enhanced terminal emulator.

import:
  # uncomment the flavour you want below:
  #  - ~/.config/alacritty/catppuccin/catppuccin-mocha.yml
  - ~/.config/alacritty/catppuccin/catppuccin-macchiato.yml
#  - ~/.config/alacritty/catppuccin/catppuccin-frappe.yml
#  - ~/.config/alacritty/catppuccin/catppuccin-latte.yml

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM: xterm-256color

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  #dimensions:
  #  columns: 160
  #  lines: 80

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  #position:
  #  x: 0
  #  y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 8
    y: 8

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: true

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background, but no title bar buttons
  decorations: buttonless

  # Background opacity
  #
  # Window opacity as a floating point number from `0.0` to `1.0`.
  # The value `0.0` is completely transparent and `1.0` is opaque.
  opacity: 1.0

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  #startup_mode: Windowed
  startup_mode: Windowed

  # Window title
  # title: Alacritty

  # Window class (Linux only):
  # class: Alacritty

  # Allow terminal applications to change Alacritty's window title.
  dynamic_title: true

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

# Font configuration (changes require restart)
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux) monospace
    #   - (Windows) Consolas
    family: 'JetBrainsMonoNL Nerd Font'

    # The `style` can be specified to pick a specific face.
    style: Regular

  # Bold font face
  bold:
    # Font family
    #
    # If the bold family is not specified, it will fall back to the
    # value specified for the normal font.
    family: 'JetBrainsMonoNL Nerd Font'

    # The `style` can be specified to pick a specific face.
    style: Bold

  # Italic font face
  italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.
    family: 'JetBrainsMonoNL Nerd Font'

    # The `style` can be specified to pick a specific face.
    style: Italic

  # Point size
  size: 14
  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  #offset:
  #  x: 0
  #  y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  #glyph_offset:
  #  x: 0
  #  y: 0

  # If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
bell:
  animation: EaseOutExpo
  duration: 0
  color: '0xffffff'

# Mouse bindings
#
# Available fields:
#   - mouse
#   - action
#   - mods (optional)
#
# Values for `mouse`:
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true
hints:
  # Keys used for the hint labels.
  #alphabet: "jfkdls;ahgurieowpq"

  # List with all available hints
  #
  # Each hint must have any of `regex` or `hyperlinks` field and either an
  # `action` or a `command` field. The fields `mouse`, `binding` and
  # `post_processing` are optional.
  #
  # The `hyperlinks` option will cause OSC 8 escape sequence hyperlinks to be
  # highlighted.
  #
  # The fields `command`, `binding.key`, `binding.mods`, `binding.mode` and
  # `mouse.mods` accept the same values as they do in the `key_bindings` section.
  #
  # The `mouse.enabled` field controls if the hint should be underlined while
  # the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
  #
  # If the `post_processing` field is set to `true`, heuristics will be used to
  # shorten the match if there are characters likely not to be part of the hint
  # (e.g. a trailing `.`). This is most useful for URIs and applies only to
  # `regex` matches.
  #
  # Values for `action`:
  #   - Copy
  #       Copy the hint's text to the clipboard.
  #   - Paste
  #       Paste the hint's text to the terminal or search.
  #   - Select
  #       Select the hint's text.
  #   - MoveViModeCursor
  #       Move the vi mode cursor to the beginning of the hint.
  enabled:
    - regex: "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)[^\0-\x1f-<>\"\\s{-}\\^⟨⟩`]+"
      hyperlinks: true
      command: open
      post_processing: true
      mouse:
        enabled: true
        mods: None
      binding:
        key: U
        mods: Control|Shift

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux) user login shell
#   - (Windows) powershell
shell:
  program: /usr/local/bin/zsh
  args:
    - -l
  #  - -c
  #  - "tmux new-session -A -D -s main"
  #shell:
  #   program: /bin/zsh
  #   args:
  #     # login
  #     - -l
  #     - -c
  #     - zellij attach --index 0 --create
  #program: zellij
  #args:
  #  # login
  #  - attach
  #  - --index
  #  - 0
  #  - --create


  # Startup directory
  #
  # Directory the shell is started in. If this is unset, or `None`, the working
  # directory of the parent process will be used.
  #working_directory: None
working_directory: /Users/zhaopeng18/Documents/local_projects

# Windows 10 ConPTY backend (Windows only)
#
# This will enable better color support and may resolve other issues,
# however this API and its implementation is still young and so is
# disabled by default, as stability may not be as good as the winpty
# backend.
#
# Alacritty will fall back to the WinPTY automatically if the ConPTY
# backend cannot be initialized.
enable_experimental_conpty_backend: false

debug:
  # Display the time it takes to redraw each frame.
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Warn

  # Print all received window events.
  print_events: false

  # Record all characters and escape sequences as test data.
  ref_test: false

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
key_bindings:
  # (Windows/Linux only)
  #- { key: V,        mods: Control|Shift, action: Paste            }
  #- { key: C,        mods: Control|Shift, action: Copy             }
  #- { key: Insert,   mods: Shift,         action: PasteSelection   }
  #- { key: Key0,     mods: Control,       action: ResetFontSize    }
  #- { key: Equals,   mods: Control,       action: IncreaseFontSize }
  #- { key: Add,      mods: Control,       action: IncreaseFontSize }
  #- { key: Subtract, mods: Control,       action: DecreaseFontSize }
  #- { key: Minus,    mods: Control,       action: DecreaseFontSize }
  - { key: Return, mods: Alt, action: ToggleFullscreen }
  #- { key : N, mods : Command, action : CreateNewWindow             }
  # (macOS only)
  - { key: Key0, mods: Command, action: ResetFontSize }
  - { key: Equals, mods: Command, action: IncreaseFontSize }
  - { key: Minus, mods: Command, action: DecreaseFontSize }
  #- { key: Return, mods: Command,         action: SpawnNewInstance }
  #- { key: K,      mods: Command,         action: ClearHistory     }
  #- { key: K,      mods: Command,         chars: "\x0c"            }
  #- { key: V,      mods: Command,         action: Paste            }
  #- { key: C,      mods: Command,         action: Copy             }
  #- { key: H,      mods: Command,         action: Hide             }
  #- { key: Q,      mods: Command,         action: Quit             }
  #- { key: W,      mods: Command,         action: Quit             }
  #- { key: F,      mods: Command|Control, action: ToggleFullscreen }
  - {
      key: Comma,
      mods: Command,
      chars: "$EDITOR ~/.config/alacritty/alacritty.yml\r"
    }
  - { key: Paste, action: Paste }
  - { key: Copy, action: Copy }
  - { key: L, mods: Control, action: ClearLogNotice }
  - { key: L, mods: Control, chars: "\f" }
  - { key: Home, mods: Alt, chars: "\e[1;3H" }
  - { key: Home, chars: "\eOH", mode: AppCursor }
  - { key: Home, chars: "\e[H", mode: ~AppCursor }
  - { key: End, mods: Alt, chars: "\e[1;3F" }
  - { key: End, chars: "\eOF", mode: AppCursor }
  - { key: End, chars: "\e[F", mode: ~AppCursor }
  - {
      key: PageUp,
      mods: Shift,
      action: ScrollPageUp,
      mode: ~Alt
    }
  - { key: PageUp, mods: Shift, chars: "\e[5;2~", mode: Alt }
  - { key: PageUp, mods: Control, chars: "\e[5;5~" }
  - { key: PageUp, mods: Alt, chars: "\e[5;3~" }
  - { key: PageUp, chars: "\e[5~" }
  - {
      key: PageDown,
      mods: Shift,
      action: ScrollPageDown,
      mode: ~Alt
    }
  - {
      key: PageDown,
      mods: Shift,
      chars: "\e[6;2~",
      mode: Alt
    }
  - { key: PageDown, mods: Control, chars: "\e[6;5~" }
  - { key: PageDown, mods: Alt, chars: "\e[6;3~" }
  - { key: PageDown, chars: "\e[6~" }
  - { key: Tab, mods: Shift, chars: "\e[Z" }
  # - { key: Back,    action:  ReceiveChar}
  # - { key: Back,                    chars: "\x7f"                            }
  # - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                        }
  - { key: Insert, chars: "\e[2~" }
  - { key: Delete, chars: "\e[3~" }
  - { key: Left, mods: Shift, chars: "\e[1;2D" }
  - { key: Left, mods: Control, chars: "\e[1;5D" }
  - { key: Left, mods: Alt, chars: "\eb" }
  - { key: Right, mods: Alt, chars: "\ef" }
  - { key: B, mods: Alt, chars: "\eb" }
  - { key: F, mods: Alt, chars: "\ef" }
  - { key: D, mods: Alt, chars: "\ed" }
  - { key: Left, chars: "\e[D", mode: ~AppCursor }
  - { key: Left, chars: "\eOD", mode: AppCursor }
  - { key: Right, mods: Shift, chars: "\e[1;2C" }
  - { key: Right, mods: Control, chars: "\e[1;5C" }
  - { key: Right, mods: Alt, chars: "\ef" }
  - { key: Right, chars: "\e[C", mode: ~AppCursor }
  - { key: Right, chars: "\eOC", mode: AppCursor }
  - { key: Up, mods: Shift, chars: "\e[1;2A" }
  - { key: Up, mods: Control, chars: "\e[1;5A" }
  - { key: Up, mods: Alt, chars: "\e[1;3A" }
  - { key: Up, chars: "\e[A", mode: ~AppCursor }
  - { key: Up, chars: "\eOA", mode: AppCursor }
  - { key: Down, mods: Shift, chars: "\e[1;2B" }
  - { key: Down, mods: Control, chars: "\e[1;5B" }
  - { key: Down, mods: Alt, chars: "\e[1;3B" }
  - { key: Down, chars: "\e[B", mode: ~AppCursor }
  - { key: Down, chars: "\eOB", mode: AppCursor } #https://github.com/alacritty/alacritty/issues/62#issuecomment-347552058
  - { key: A, mods: Alt, chars: "\ea" }
  - { key: B, mods: Alt, chars: "\eb" }
  - { key: C, mods: Alt, chars: "\ec" }
  - { key: D, mods: Alt, chars: "\ed" }
  - { key: E, mods: Alt, chars: "\ee" }
  - { key: F, mods: Alt, chars: "\ef" }
  - { key: G, mods: Alt, chars: "\eg" }
  - { key: H, mods: Alt, chars: "\eh" }
  - { key: I, mods: Alt, chars: "\ei" }
  - { key: J, mods: Alt, chars: "\ej" }
  - { key: K, mods: Alt, chars: "\ek" }
  - { key: L, mods: Alt, chars: "\el" }
  - { key: M, mods: Alt, chars: "\em" }
  - { key: N, mods: Alt, chars: "\en" }
  - { key: O, mods: Alt, chars: "\eo" }
  - { key: P, mods: Alt, chars: "\ep" }
  - { key: Q, mods: Alt, chars: "\eq" }
  - { key: R, mods: Alt, chars: "\er" }
  - { key: S, mods: Alt, chars: "\es" }
  - { key: T, mods: Alt, chars: "\et" }
  - { key: U, mods: Alt, chars: "\eu" }
  - { key: V, mods: Alt, chars: "\ev" }
  - { key: W, mods: Alt, chars: "\ew" }
  - { key: X, mods: Alt, chars: "\ex" }
  - { key: Y, mods: Alt, chars: "\ey" }
  - { key: Z, mods: Alt, chars: "\ez" }
  - { key: A, mods: Alt|Shift, chars: "\eA" }
  - { key: B, mods: Alt|Shift, chars: "\eB" }
  - { key: C, mods: Alt|Shift, chars: "\eC" }
  - { key: D, mods: Alt|Shift, chars: "\eD" }
  - { key: E, mods: Alt|Shift, chars: "\eE" }
  - { key: F, mods: Alt|Shift, chars: "\eF" }
  - { key: G, mods: Alt|Shift, chars: "\eG" }
  - { key: H, mods: Alt|Shift, chars: "\eH" }
  - { key: I, mods: Alt|Shift, chars: "\eI" }
  - { key: J, mods: Alt|Shift, chars: "\eJ" }
  - { key: K, mods: Alt|Shift, chars: "\eK" }
  - { key: L, mods: Alt|Shift, chars: "\eL" }
  - { key: M, mods: Alt|Shift, chars: "\eM" }
  - { key: N, mods: Alt|Shift, chars: "\eN" }
  - { key: O, mods: Alt|Shift, chars: "\eO" }
  - { key: P, mods: Alt|Shift, chars: "\eP" }
  - { key: Q, mods: Alt|Shift, chars: "\eQ" }
  - { key: R, mods: Alt|Shift, chars: "\eR" }
  - { key: S, mods: Alt|Shift, chars: "\eS" }
  - { key: T, mods: Alt|Shift, chars: "\eT" }
  - { key: U, mods: Alt|Shift, chars: "\eU" }
  - { key: V, mods: Alt|Shift, chars: "\eV" }
  - { key: W, mods: Alt|Shift, chars: "\eW" }
  - { key: X, mods: Alt|Shift, chars: "\eX" }
  - { key: Y, mods: Alt|Shift, chars: "\eY" }
  - { key: Z, mods: Alt|Shift, chars: "\eZ" }
  - { key: Key1, mods: Alt, chars: "\e1" }
  - { key: Key2, mods: Alt, chars: "\e2" }
  - { key: Key3, mods: Alt, chars: "\e3" }
  - { key: Key4, mods: Alt, chars: "\e4" }
  - { key: Key5, mods: Alt, chars: "\e5" }
  - { key: Key6, mods: Alt, chars: "\e6" }
  - { key: Key7, mods: Alt, chars: "\e7" }
  - { key: Key8, mods: Alt, chars: "\e8" }
  - { key: Key9, mods: Alt, chars: "\e9" }
  - { key: Key0, mods: Alt, chars: "\e0" }
  - { key: Space, mods: Control, chars: "\0" } # Ctrl + Space
  - { key: Grave, mods: Alt, chars: "\e`" } # Alt + `
  - { key: Grave, mods: Alt|Shift, chars: "\e~" } # Alt + ~
  - { key: Period, mods: Alt, chars: "\e." } # Alt + .
  - { key: Key8, mods: Alt|Shift, chars: "\e*" } # Alt + *
  - { key: Key3, mods: Alt|Shift, chars: "\e#" } # Alt + #
  - { key: Period, mods: Alt|Shift, chars: "\e>" } # Alt + >
  - { key: Comma, mods: Alt|Shift, chars: "\e<" } # Alt + <
  - { key: Minus, mods: Alt|Shift, chars: "\e_" } # Alt + _
  - { key: Key5, mods: Alt|Shift, chars: "\e%" } # Alt + %
  - { key: Key6, mods: Alt|Shift, chars: "\e^" } # Alt + ^
  - { key: Backslash, mods: Alt, chars: "\e\\" } # Alt + \
  - { key: Backslash, mods: Alt|Shift, chars: "\e|" } # Alt + |
  - { key: Semicolon, mods: Alt, chars: "\e;" } # Alt + ;
  - { key: LBracket, mods: Command|Shift, chars: "\e{" } # Alt + {
  - { key: RBracket, mods: Command|Shift, chars: "\e}" } # Alt + }
  - { key: LBracket, mods: Alt, chars: "\e[" } # Alt + [
  - { key: RBracket, mods: Alt, chars: "\e]" } # Alt + ]
